dnl ==================================================
dnl Versioning
dnl ==========
dnl
dnl MAJOR	Major number for this branch.
dnl
dnl MINOR	The most recent interface number this
dnl 		library implements.
dnl
dnl COMPATMINOR	The latest binary compatible minor number
dnl 		this library implements.
dnl
dnl PATCH	The implementation number of the current interface.
dnl
dnl
dnl - The package VERSION will be MAJOR.MINOR.PATCH.
dnl
dnl - Libtool's -version-info will be derived from MAJOR, MINOR, PATCH
dnl   and COMPATMINOR (see configure.ac).
dnl
dnl - Changing MAJOR always breaks binary compatibility.
dnl
dnl - Changing MINOR doesn't break binary compatibility by default.
dnl   Only if COMPATMINOR is changed as well.
dnl
dnl
dnl 1) After branching from TRUNK increment TRUNKs MAJOR and
dnl    start with version `MAJOR.0.0' and also set COMPATMINOR to 0.
dnl
dnl 2) Update the version information only immediately before a public release
dnl    of your software. More frequent updates are unnecessary, and only guarantee
dnl    that the current interface number gets larger faster.
dnl
dnl 3) If the library source code has changed at all since the last update,
dnl    then increment PATCH.
dnl
dnl 4) If any interfaces have been added, removed, or changed since the last
dnl    update, increment MINOR, and set PATCH to 0.
dnl
dnl 5) If any interfaces have been added since the last public release, then
dnl    leave COMPATMINOR unchanged. (binary compatible change)
dnl
dnl 6) If any interfaces have been removed since the last public release, then
dnl    set COMPATMINOR to MINOR. (binary incompatible change)
dnl
dnl ==================================================
m4_define([LIBZYPPTESTSUITE_MAJOR], 	 [3])
dnl ==================================================
m4_define([LIBZYPPTESTSUITE_MINOR],	 [14])
m4_define([LIBZYPPTESTSUITE_COMPATMINOR], [9])
dnl ==================================================
m4_define([LIBZYPPTESTSUITE_PATCH],	 [9])
dnl ==================================================
